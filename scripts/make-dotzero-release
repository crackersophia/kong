#!/usr/bin/env bash

red="\033[0;31m"
green="\033[0;32m"
cyan="\033[0;36m"
bold="\033[1m"
nocolor="\033[0m"

#-------------------------------------------------------------------------------
function step() {
   box="   "
   color="$nocolor"
   if [ "$version" != "<x.y.0>" ]
   then
      if [ -e "/tmp/.step-$1-$version" ]
      then
         color="$green"
         box="[x]"
      else
         color="$bold"
         box="[ ]"
      fi
   fi
   echo -e "$color $box Step $c) $2"
   echo "        $0 $version $1 $3"
   echo -e "$nocolor"
   c="$[c+1]"
}

#-------------------------------------------------------------------------------
function usage() {
   echo
   echo -e "Make a Kong ${bold}.0${nocolor} release using this script:"
   echo ""
   echo "Usage:"
   if [ "$version" = "<x.y.0>" ]
   then
      echo "     List executed steps for a given release"
      echo "        $0 $version $1 $3"
      echo
   fi
   c=1
   step "create"           "create the branch"
   step "write_changelog"  "prepare the changelog"
   step "commit_changelog" "commit the changelog"
   step "version_bump"     "bump and commit the version number"
   step "submit"           "push and submit a release PR"
   step "docs_branch"      "create a docs.konghq.com branch for the release" "[--drop-local-changes]"
   step "tag"              "tag and sign the release candidate"
   step "update_docker"    "update and submit a PR to Kong's docker-kong repo"
   step "merge_docker"     "merge, tag and sign Kong's docker-kong PR"
   step "submit_docker"    "submit a PR to docker-library/official-images"
   step "homebrew"         "bump version and submit a PR to homebrew-kong"
   step "luarocks"         "upload to LuaRocks" "<api-key>"
   step "vagrant"          "bump version and submit a PR to kong-vagrant"
   step "pongo"            "bump version and submit a PR to kong-pongo"
   exit 0
}

#-------------------------------------------------------------------------------
function die() {
   echo
   for line in "$@"
   do
      echo -e "$red$bold*** $line$nocolor"
   done
   echo "See also: $0 --help"
   echo
   exit 1
}

#-------------------------------------------------------------------------------
function SUCCESS() {
   echo
   echo -e "$green$bold****************************************$nocolor$bold"
   for line in "$@"
   do
      echo "$line"
   done
   echo -e "$green$bold****************************************$nocolor"
   echo
   touch /tmp/.step-$step-$version
   exit 0
}

#-------------------------------------------------------------------------------
function CONFIRM() {
   echo
   echo -e "$cyan$bold----------------------------------------$nocolor$bold"
   for line in "$@"
   do
      echo -e "$line"
   done
   echo -e "$cyan$bold----------------------------------------$nocolor"
   read
}

#-------------------------------------------------------------------------------
# Dependency checks
#-------------------------------------------------------------------------------

hub --version &> /dev/null || die "hub is not in PATH. Get it from https://github.com/github/hub"

if resty -v &> /dev/null
then
   LUA=resty
elif lua -v &> /dev/null
then
   LUA=lua
else
   die "Lua interpreter is not in PATH. Install any Lua or OpenResty to run this script."
fi

#-------------------------------------------------------------------------------
# Default help
#-------------------------------------------------------------------------------

if [ "$1" = "-h" ] || [ "$1" = "--help" ] || ! [ "$1" ]
then
   version="<x.y.0>"
   usage
fi

#-------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------

version="$1"
step="$2"

xyzversion="${version}"
major=${xyzversion%%.*}
rest=${xyzversion#*.}
minor=${rest%%.*}
patch=${rest##*.}
rockspec="kong-$version-0.rockspec"
branch="release/$xyzversion"
dockerbranch="release/$version"
xyxversion="$major.$minor.x"

if ! [[ "$version" =~ ^[0-9]+.[0-9]+.0$ ]]
then
   die "first argument must be a version in x.y.0 format"
fi

if [ "$step" = "" ]
then
   usage
fi

EDITOR="${EDITOR-$VISUAL}"

#-------------------------------------------------------------------------------
function prepare_changelog() {
   $LUA -e '
      local fd_in = io.open("CHANGELOG.md", "r")
      local fd_out = io.open("CHANGELOG.md.new", "w")
      local version = "'$version'"

      local state = "start"
      for line in fd_in:lines() do
         if state == "start" then
            if line:match("^%- %[") then
               fd_out:write("- [" .. version .. "](#" .. version:gsub("%.", "") .. ")\n")
               state = "toc"
            end
         elseif state == "toc" then
            if not line:match("^%- %[") then
               state = "start_log"
            end
         elseif state == "start_log" then
            fd_out:write("\n")
            fd_out:write("## [" .. version .. "]\n")
            fd_out:write("\n")
            local today = os.date("*t")
            fd_out:write(("> Released %04d/%02d/%02d\n"):format(today.year, today.month, today.day))
            fd_out:write("\n")
            fd_out:write("<<< TODO Introduction, plus any sections below >>>\n")
            fd_out:write("\n")
            fd_out:write("### Additions\n")
            fd_out:write("\n")
            fd_out:write("##### Core\n")
            fd_out:write("\n")
            fd_out:write("##### CLI\n")
            fd_out:write("\n")
            fd_out:write("##### Configuration\n")
            fd_out:write("\n")
            fd_out:write("##### Admin API\n")
            fd_out:write("\n")
            fd_out:write("##### PDK\n")
            fd_out:write("\n")
            fd_out:write("##### Plugins\n")
            fd_out:write("\n")
            fd_out:write("### Fixes\n")
            fd_out:write("\n")
            fd_out:write("##### Core\n")
            fd_out:write("\n")
            fd_out:write("##### CLI\n")
            fd_out:write("\n")
            fd_out:write("##### Configuration\n")
            fd_out:write("\n")
            fd_out:write("##### Admin API\n")
            fd_out:write("\n")
            fd_out:write("##### PDK\n")
            fd_out:write("\n")
            fd_out:write("##### Plugins\n")
            fd_out:write("\n")
            fd_out:write("### Changes\n")
            fd_out:write("\n")
            fd_out:write("##### Core\n")
            fd_out:write("\n")
            fd_out:write("##### CLI\n")
            fd_out:write("\n")
            fd_out:write("##### Configuration\n")
            fd_out:write("\n")
            fd_out:write("##### Admin API\n")
            fd_out:write("\n")
            fd_out:write("##### PDK\n")
            fd_out:write("\n")
            fd_out:write("##### Plugins\n")
            fd_out:write("\n")
            fd_out:write("\n")
            fd_out:write("[Back to TOC](#table-of-contents)\n")
            fd_out:write("\n")
            state = "log"
         elseif state == "log" then
            local prev_version = line:match("^%[(%d+%.%d+%.%d+)%]: ")
            if prev_version then
               fd_out:write("[" .. version .. "]: https://github.com/Kong/kong/compare/" .. prev_version .."..." .. version .. "\n")
               state = "last"
            end
         end

         fd_out:write(line .. "\n")
      end
      fd_in:close()
      fd_out:close()
   '
   mv CHANGELOG.md.new CHANGELOG.md
}

#-------------------------------------------------------------------------------
function bump_docs_kong_versions() {
cat <<EOF >> app/_data/kong_versions.yml
-
  release: "$xyxversion"
  version: "$xyzversion"
  edition: "community"
  luarocks_version: "$xyzversion-0"
  dependencies:
    luajit: "2.1.0-beta3"
    luarocks: "$RESTY_LUAROCKS_VERSION"
    cassandra: "3.x.x"
    postgres: "9.5+"
    openresty: "$RESTY_VERSION"
EOF
}

#-------------------------------------------------------------------------------
function switch_to_docs_repo() {
   if [ -d ../docs.konghq.com ]
   then
      cd ../docs.konghq.com

      if [ $(git status --untracked-files=no --porcelain | wc -l) != "0" ]
      then
         if [ "$1" = "--drop-local-changes" ]
         then
            git checkout .
            git reset
            git checkout .
         else
            die "Local tree in your docs.konghq.com checkout is not clean," \
                "please commit or stash before running this," \
                "or run again with --drop-local-changes to discard any local changes."
         fi
      fi

      if git branch | grep -q " $branch$"
      then
         CONFIRM "A branch called $branch already exists in your local checkout" \
                 "of the docs.konghq.com repo. ${red}${bold}Delete it${nocolor}${bold} and create from scratch?" \
                 "Press Enter to continue of Ctrl-C to cancel."

         #git checkout master
         #git branch -D "$branch"
      else
         CONFIRM "This will create a new branch $branch in your local copy of" \
                 "the docs.konghq.com repo. Press Enter to continue" \
                 "or Ctrl-C to cancel."
      fi
   else
      CONFIRM "This will clone the the docs.konghq.com repo and" \
              "create a new branch $branch. Press Enter to continue" \
              "or Ctrl-C to cancel."

      cd ..
      git clone https://github.com/kong/docs.konghq.com
      cd docs.konghq.com
   fi
}

#-------------------------------------------------------------------------------
function make_github_release_file() {
   versionlink=$(echo $version | tr -d .)
   cat <<EOF > release-$version.txt
$version

**Download Kong $version and run it now:**

- https://konghq.com/install/
- [Docker Image](https://hub.docker.com/_/kong/)

Links:
- [$version Changelog](https://github.com/Kong/kong/blob/$version/CHANGELOG.md#$versionlink)
EOF
}

#-------------------------------------------------------------------------------
function bump_homebrew() {
   $LUA -e '
      local fd_in = io.open("Formula/kong.rb", "r")
      local fd_out = io.open("Formula/kong.rb.new", "w")
      local version = "'$version'"

      local state = "start"
      for line in fd_in:lines() do
         if line:match("^  stable do") then
            fd_out:write("  devel do\n")
            fd_out:write("    url \"https://github.com/Kong/kong.git\", :tag => \"" .. version .. "\"\n")
            fd_out:write("  end\n\n")
         end
         fd_out:write(line .. "\n")
      end
      fd_in:close()
      fd_out:close()
   '
   mv Formula/kong.rb.new Formula/kong.rb
}

#-------------------------------------------------------------------------------
function ensure_recent_luarocks() {
   if ! ( luarocks upload --help | grep -q temp-key )
   then
      if [ `uname -s` = "Linux" ]
      then
         set -e
         source .requirements
         lv=3.2.1
         pushd /tmp
         rm -rf luarocks-$lv
         mkdir -p luarocks-$lv
         cd luarocks-$lv
         curl -L -o "luarocks-$lv-linux-x86_64.zip" https://luarocks.github.io/luarocks/releases/luarocks-$lv-linux-x86_64.zip
         unzip luarocks-$lv-linux-x86_64.zip
         export PATH=/tmp/luarocks-$lv/luarocks-$lv-linux-x86_64:$PATH
         popd
      else
         die "Your LuaRocks version is too old. Please upgrade LuaRocks."
      fi
   fi
}

#-------------------------------------------------------------------------------
function bump_vagrant() {
   sed -i 's/version = "[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*"/version = "'$version'"/' Vagrantfile
   sed -i 's/`[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*`/`'$version'`/' README.md
}

case "$step" in
   #---------------------------------------------------------------------------
   create)
      if [ $(git status --untracked-files=no --porcelain | wc -l) != "0" ]
      then
         die "Local tree is not clean, please commit or stash before running this."
      fi

      set -e
      git checkout next
      git pull
      git checkout -B "$branch"

      SUCCESS "Release branch was created locally." \
              "You are ready to run the next step:" \
              "    $0 $version write_changelog"
      ;;
   #---------------------------------------------------------------------------
   write_changelog)
      if ! grep -q "\[$version\]" CHANGELOG.md
      then
         prepare_changelog
      fi

      CONFIRM "Press Enter to open your text editor ($EDITOR) to edit CHANGELOG.md" \
              "or Ctrl-C to cancel."

      $EDITOR CHANGELOG.md

      SUCCESS "If you need to further edit the changelog," \
              "you can run this step again."
              "If it is ready, you can proceed to the next step" \
              "which will commit it:" \
              "    $0 $version commit_changelog"
      ;;
   #---------------------------------------------------------------------------
   commit_changelog)
      if ! git status CHANGELOG.md | grep -q "modified:"
      then
         die "No changes in CHANGELOG.md to commit. Did you write the changelog?"
      fi

      git diff

      CONFIRM "If everything looks all right, press Enter to commit" \
              "or Ctrl-C to cancel."

      set -e
      git add CHANGELOG.md
      git commit -m "docs(changelog) add $version changes"
      git log -n 1

      SUCCESS "The changelog is now committed locally." \
              "You are ready to run the next step:" \
              "    $0 $version version_bump"
      ;;
   #---------------------------------------------------------------------------
   version_bump)
      if ! grep -q "minor = $minor" kong/meta.lua
      then
         sed -i 's/major = [0-9]*/major = '$major'/' kong/meta.lua
         sed -i 's/minor = [0-9]*/minor = '$minor'/' kong/meta.lua
         sed -i 's/patch = [0-9]*/patch = '$patch'/' kong/meta.lua
         sed -i 's/-- suffix.*/suffix = ""/' kong/meta.lua
      fi
      if ! [ -f "$rockspec" ]
      then
         old_rockspec=$(ls kong-*-0.rockspec | head -n 1)
         sed -i 's/^version = ".*"/version = "'$version'-0"/' "$old_rockspec"
         sed -i 's/^  tag = ".*"/  tag = "'$version'"/' "$old_rockspec"
      fi

      git diff HEAD

      CONFIRM "If everything looks all right, press Enter to make the release commit" \
              "or Ctrl-C to cancel."

      git mv "$old_rockspec" "$rockspec"
      git add kong/meta.lua
      git add $rockspec

      git commit -m "release: $version"
      git log -n 1

      SUCCESS "Version bump for the release is now committed locally." \
              "You are ready to run the next step:" \
              "    $0 $version submit"
      ;;
   #---------------------------------------------------------------------------
   submit)
      if ! git log -n 1 | grep -q "release: $version"
      then
         die "Release commit is not at the top of the current branch. Did you commit the version bump?"
      fi

      git log

      CONFIRM "Press Enter to push the branch and open the release PR" \
              "or Ctrl-C to cancel."

      set -e
      git push --set-upstream origin "$branch"
      hub pull-request -b master -h "$branch" -m "Release: $version" -l "pr/please review,pr/do not merge"

      SUCCESS "Now get the above PR reviewed and approved." \
              "Once it is approved, you can continue to the 'merge' step." \
              "In the mean time, you can run the 'docs_branch' step:" \
              "    $0 $version docs_branch"
      ;;
   #---------------------------------------------------------------------------
   docs_branch)
      source .requirements
      if [ "$KONG_PACKAGE_NAME" != "kong" ]
      then
         die "Could not read data from .requirements. Are you in the Kong repo folder?"
      fi

      ensure_recent_luarocks

      #set -e

      switch_to_docs_repo "$3"

      luarocks init --lua-version=$($LUA -e 'print(_VERSION:match("5%.%d"))')
      luarocks install ldoc
      eval $(luarocks path --bin)

#      git checkout master
#      git pull
#      git checkout -B "$branch"
      git checkout "$branch"

      # - app/ ---------------------------------
#      rm -rf app/$xyxversion
#      prev=$(ls app/ | sort -V | grep "^[0-9].*x" | tail -n 1)
#      cp -a app/$prev app/$xyxversion
#      bump_docs_kong_versions
#
#      git add app/$xyxversion
#      git add app/_data/kong_versions.yml
#      git commit -m "docs($xyxversion/*) add app/$xyxversion directory"
#      # ----------------------------------------

      # -- PDK ---------------------------------
      git rm -rf app/$xyxversion/pdk/*
      mkdir -p app/$xyxversion/pdk
      for f in $(find ../kong/kong/pdk -name "*.lua" | grep -v "/private/")
      do
         echo $f
         ldoc -q -c ldoc/config.ld "$f"
         in_md=$(echo $f | sed 's,../kong/kong/pdk/\(.*\).lua$,kong.\1.md,g;s,/,.,g')
         out_md=$in_md
         if [ $in_md = "kong.init.md" ]
         then
            in_md=PDK.md
            out_md=index.md
         fi
         mv $in_md app/$xyxversion/pdk/$out_md
         git add   app/$xyxversion/pdk/$out_md
      done

      git commit -m "docs($xyxversion/pdk) auto-generate PDK docs for version $version"
      # ----------------------------------------

      # -- Admin API ---------------------------
      (
         cd ../kong
         rm -rf autodoc/output
         scripts/autodoc-admin-api
         if ! [ -e autodoc/output/admin-api/admin-api.md ] && \
              [ -e autodoc/output/nav/docs_nav.yml.admin-api.in ]
         then
            die "Could not generate Admin API docs."
         fi
         mv autodoc/output/admin-api/admin-api.md         ../docs.konghq.com/app/$xyxversion/admin-api.md
         mv autodoc/output/admin-api/db-less-admin-api.md ../docs.konghq.com/app/$xyxversion/db-less-admin-api.md
         mv autodoc/output/nav/docs_nav.yml.admin-api.in  ../docs.konghq.com/autodoc-nav/docs_nav_$xyxversion.yml.admin-api.in
         rm -rf autodoc/output
      )

      git add app/$xyxversion/admin-api.md
      git add app/$xyxversion/db-less-admin-api.md
      git commit -m "docs($xyxversion/admin-api) auto-generate Admin API docs for version $version"
      # ----------------------------------------

      # -- Nav ---------------------------------
      cat app/_data/docs_nav_$prev.yml | gawk '/Plugin Development Kit/ { exit } { print }' > autodoc-nav/docs_nav_$xyxversion.yml.head.in
      KONG_VERSION=$xyxversion $LUA autodoc-nav/run.lua

      git add app/_data/docs_nav_$xyxversion.yml
      git commit -m "docs($xyxversion/nav) auto-generate navigation for version $version"
      # ----------------------------------------

      # -- CLI ---------------------------------
      KONG_PATH=../kong KONG_VERSION=$xyxversion $LUA autodoc-cli/run.lua

      git add app/$xyxversion/cli.md
      git commit -m "docs($xyxversion/cli) auto-generate CLI docs for version $version"
      # ----------------------------------------

      # -- configuration -----------------------
      KONG_PATH=../kong KONG_VERSION=$xyxversion $LUA autodoc-conf/run.lua

      git add app/$xyxversion/configuration.md
      git commit -m "docs($xyxversion/config) auto-generate config docs for version $version"
      # ----------------------------------------

      git checkout .
      gitk || tig || {
         set +e
         git log --color master..$branch | less -R
         git show HEAD^^^^
         git show HEAD^^^
         git show HEAD^^
         git show HEAD^
         git show HEAD
         set -e
      }

      CONFIRM "This is the generated app/$xyxversion." \
              "If everything looks all right, Press Enter to push the branch" \
              "or Ctrl-C to cancel."

      git push --set-upstream origin "$branch"

      SUCCESS "Now merge any other documentation PRs into this branch," \
              "and once the branch is ready, open a PR and let" \
              "Team Docs know this is meant to be merged only when" \
              "$xyzversion final is released."
      ;;
   #---------------------------------------------------------------------------
   tag)
      CONFIRM "Press Enter to tag the release candidate" \
              "or Ctrl-C to cancel."

      set -e
      git checkout "$branch"
      git pull
      git tag -s "$version" -m "$version"
      git push origin "$version"

      make_github_release_file

      hub release create --prerelease -F release-$version.txt "$version"
      rm -f release-$version.txt

      SUCCESS "Make sure the packages are built and available on Bintray" \
              "before continuing to the following steps." \
              "Once they are built, you may run the following steps in parallel:" \
              "* 'homebrew'" \
              "* 'update_docker', then 'merge_docker', then 'submit_docker'"
      ;;
   #---------------------------------------------------------------------------
   update_docker)
      if [ -d ../docker-kong ]
      then
         cd ../docker-kong
      else
         cd ..
         git clone https://github.com/kong/docker-kong
         cd docker-kong
      fi

      set -e
      ./update.sh "$version"

      SUCCESS "Make sure you get the PR above approved and merged" \
              "before continuing to the step 'merge_docker'."
      ;;
   #---------------------------------------------------------------------------
   merge_docker)
      if [ -d ../docker-kong ]
      then
         cd ../docker-kong
      else
         cd ..
         git clone https://github.com/kong/docker-kong
         cd docker-kong
      fi

      set -e
      git checkout "$dockerbranch"
      git pull
      git checkout master
      git pull
      git merge "$dockerbranch"
      git push
      git tag -s "$version" -m "$version"
      git push origin "$version"
      git push --delete origin "$dockerbranch"

      SUCCESS "Now you can run the next step:" \
              "    $0 $version submit_docker"
      ;;
   #---------------------------------------------------------------------------
   submit_docker)
      die "submit_docker automation for .0 releases is not yet implemented! Please follow the Release Checklist doc. :("
      ;;
   #---------------------------------------------------------------------------
   homebrew)
      if [ -d ../homebrew-kong ]
      then
         cd ../homebrew-kong
      else
         cd ..
         git clone https://github.com/kong/homebrew-kong
         cd homebrew-kong
      fi

      git checkout master
      git pull
      git checkout -B "$branch"
      bump_homebrew

      git diff

      CONFIRM "If everything looks all right, press Enter to commit and send a PR to https://github.com/kong/homebrew-kong" \
              "or Ctrl-C to cancel."

      set -e
      git add Formula/kong.rb
      git commit -m "chore(kong) bump kong to $version"

      git push --set-upstream origin "$branch"
      hub pull-request -b master -h "$branch" -m "Release: $version"

      SUCCESS "Make sure you get the PR above approved and merged."
      ;;
   #---------------------------------------------------------------------------
   vagrant)
      if [ -d ../kong-vagrant ]
      then
         cd ../kong-vagrant
      else
         cd ..
         git clone https://github.com/kong/kong-vagrant
         cd kong-vagrant
      fi

      git checkout master
      git pull
      git checkout -B "$branch"
      bump_vagrant

      git diff

      CONFIRM "If everything looks all right, press Enter to commit and send a PR to https://github.com/kong/homebrew-kong" \
              "or Ctrl-C to cancel."

      set -e
      git add README.md Vagrantfile
      git commit -m "chore(*) bump Kong to $version"

      git push --set-upstream origin "$branch"
      hub pull-request -b master -h "$branch" -m "Release: $version"

      SUCCESS "Make sure you get the PR above approved and merged."
      ;;
   #---------------------------------------------------------------------------
   luarocks)
      if ! [ "$3" ]
      then
         die "Kong API key for LuaRocks is required as an argument."
      fi

      set -e
      ensure_recent_luarocks

      luarocks --version

      luarocks upload --temp-key="$3" "$rockspec" --force

      SUCCESS "The LuaRocks entry is now up!"
      ;;
   #---------------------------------------------------------------------------
   pongo)
      if [ -d ../kong-pongo ]
      then
         cd ../kong-pongo
      else
         cd ..
         git clone https://github.com/kong/kong-pongo
         cd kong-pongo
      fi

      assets/add_version.sh CE $version

      SUCCESS "Make sure you get the PR above approved and merged."
      ;;
   *)
      die "Unknown step!"
      ;;
esac
